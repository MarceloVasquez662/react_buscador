{"version":3,"sources":["logo.svg","componentes/Formulario.js","componentes/Navbar.js","componentes/Imagen.js","componentes/Banner.js","componentes/Paginacion.js","componentes/BannerNulo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Formulario","busquedaRef","React","createRef","obtenerPalabra","e","preventDefault","props","current","value","className","onSubmit","this","placeholder","ref","required","type","Component","Navbar","palabra","style","backgroundColor","href","src","logo","width","height","data-target","data-toggle","id","Imagen","background","imagen","previewURL","alt","user","views","likes","largeImageURL","target","rel","Banner","imagenes","map","key","Paginacion","onClickUp","scroll","scrollToTop","onClick","paginaAnterior","paginaSiguiente","App","state","pagina","setState","consultarApi","url","fetch","then","respuesta","json","resultado","hits","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4ea7e4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.021b9945.svg\";","import React, { Component } from \"react\";\r\n\r\nexport default class Formulario extends Component {\r\n  busquedaRef = React.createRef();\r\n\r\n  obtenerPalabra = e => {\r\n    e.preventDefault();\r\n    this.props.obtenerPalabra(this.busquedaRef.current.value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"form-inline my-2 my-lg-0\" onSubmit={this.obtenerPalabra}>\r\n        <input\r\n          className=\"form-control mr-sm-2\"\r\n          placeholder=\"Ingresa tu palabra\"\r\n          ref={this.busquedaRef}\r\n          required=\"required\"\r\n        />\r\n        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">\r\n          Buscar..\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport logo from \"../logo.svg\";\r\nimport Formulario from \"./Formulario\";\r\n\r\nexport default class Navbar extends Component {\r\n  obtenerPalabra = palabra => {\r\n    this.props.obtenerPalabra(palabra);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <nav\r\n        className=\"navbar navbar-dark navbar-expand-lg\"\r\n        style={{ backgroundColor: \"rgba(0,0,0,0.8)\" }}\r\n      >\r\n        <a href=\"#\" className=\"navbar-brand\">\r\n          <img src={logo} width=\"30\" height=\"30\" />\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          data-target=\"#menuColapse\"\r\n          data-toggle=\"collapse\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"menuColapse\">\r\n          <div className=\"navbar-nav\">\r\n            <Formulario obtenerPalabra={this.obtenerPalabra} />\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Imagen extends Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"card col-12 col-sm-6 col-md-3 col-lg-2 m-2 p-0 text-white\"\r\n        style={{ background: \"rgba(0,0,0,0.5)\" }}\r\n      >\r\n        <div>\r\n          <img\r\n            src={this.props.imagen.previewURL}\r\n            alt=\"\"\r\n            className=\"card-img-top\"\r\n          ></img>\r\n        </div>\r\n        <div className=\"card-body text-center\">\r\n          <h5 className=\"card-text\">{this.props.imagen.user}</h5>\r\n          <p className=\"card-text\">Vistas: {this.props.imagen.views}</p>\r\n          <p className=\"card-text\">Likes: {this.props.imagen.likes}</p>\r\n        </div>\r\n        <div className=\"card-footer text-center\">\r\n          <a\r\n            className=\"btn btn-success btn-block\"\r\n            href={this.props.imagen.largeImageURL}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Ver\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Imagen from \"./Imagen\";\r\n\r\nexport default class Banner extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div\r\n          className=\"jumbotron text-white\"\r\n          style={{ backgroundColor: \"rgba(0,0,0,0.3)\" }}\r\n        >\r\n          <h2>Resultados para \"{this.props.palabra}\"</h2>\r\n          <p>Para visualizar las imagenes en mejor calidad, presiona Ver</p>\r\n        </div>\r\n        <div className=\"col-12 row justify-content-center\">\r\n          {this.props.imagenes.map(imagen => (\r\n            <Imagen imagen={imagen} key={imagen.id} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { animateScroll as scroll } from \"react-scroll\";\r\n\r\nexport default class Paginacion extends Component {\r\n  onClickUp = () => {\r\n    scroll.scrollToTop();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"\">\r\n        <button\r\n          onClick={this.props.paginaAnterior}\r\n          className=\"btn btn-success m-4\"\r\n        >\r\n          Anterior &larr;\r\n        </button>\r\n        <button className=\"btn btn-danger\" onClick={this.onClickUp}>\r\n          &uarr;\r\n        </button>\r\n        <button\r\n          onClick={this.props.paginaSiguiente}\r\n          className=\"btn btn-success m-4\"\r\n        >\r\n          Siguiente &rarr;\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Banner extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div\r\n          className=\"jumbotron text-white\"\r\n          style={{ backgroundColor: \"rgba(0,0,0,0.3)\" }}\r\n        >\r\n          <h2>No hay resultados para \"{this.props.palabra}\"</h2>\r\n          <p>Por favor, intente con otra palabra</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"./componentes/Navbar\";\r\nimport Banner from \"./componentes/Banner\";\r\nimport Paginacion from \"./componentes/Paginacion\";\r\nimport BannerNulo from \"./componentes/BannerNulo\";\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    palabra: \"\",\r\n    imagenes: [],\r\n    pagina: \"\"\r\n  };\r\n\r\n  obtenerPalabra = palabra => {\r\n    this.setState({ palabra: palabra, pagina: 1 }, this.consultarApi);\r\n  };\r\n\r\n  consultarApi = () => {\r\n    const url = `https://pixabay.com/api/?key=14458270-27089a7334cb422aa9bab0ba3&q=${this.state.palabra}&per_page=30&page=${this.state.pagina}`;\r\n    fetch(url)\r\n      .then(respuesta => respuesta.json())\r\n      .then(resultado => {\r\n        this.setState({ imagenes: resultado.hits });\r\n      });\r\n  };\r\n\r\n  paginaAnterior = () => {\r\n    let pagina = this.state.pagina;\r\n    if (pagina === 1) {\r\n      return null;\r\n    } else {\r\n      pagina -= 1;\r\n      this.setState({ pagina: pagina }, this.consultarApi);\r\n    }\r\n  };\r\n\r\n  paginaSiguiente = () => {\r\n    let pagina = this.state.pagina;\r\n    pagina += 1;\r\n    this.setState({ pagina: pagina }, this.consultarApi);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <section>\r\n        <div>\r\n          <Navbar obtenerPalabra={this.obtenerPalabra} />\r\n        </div>\r\n        <div>\r\n          {this.state.imagenes.length !== 0 ? (\r\n            <Banner\r\n              imagenes={this.state.imagenes}\r\n              palabra={this.state.palabra}\r\n            />\r\n          ) : (\r\n            this.state.palabra != \"\" && (\r\n              <BannerNulo palabra={this.state.palabra} />\r\n            )\r\n          )}\r\n        </div>\r\n        <div className=\"row justify-content-center\">\r\n          {this.state.imagenes.length !== 0 && (\r\n            <Paginacion\r\n              paginaAnterior={this.paginaAnterior}\r\n              paginaSiguiente={this.paginaSiguiente}\r\n            />\r\n          )}\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}